datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Clinic {
  id           Int             @id @default(autoincrement())
  name         String
  address      String
  admin        User            @relation(fields: [adminId], references: [id])
  adminId      Int
  dentists     Dentist[]
  assistants   Assistant[]
  patients     Patient[]
  registeredAt DateTime        @default(now())
  users        UserInClinic[]
  appointments Appointment[]
  settings     ClinicSettings?
}

model ClinicSettings {
  clinic              Clinic  @relation(fields: [clinicId], references: [id])
  clinicId            Int     @id
  workOnSaturday      Boolean @default(false)
  workOnSunday        Boolean @default(false)
  workStartHour       Int     @default(8)
  workStartMinutes    Int     @default(0)
  workEndHour         Int     @default(18)
  workEndMinutes      Int     @default(0)
  appointmentDuration Int     @default(30)
}

model User {
  id            Int           @id @default(autoincrement())
  email         String        @unique
  password      String
  roles         Role[]
  registeredAt  DateTime      @default(now())
  owningClinics Clinic[]
  userInClinic  UserInClinic?
}

model UserInClinic {
  user     User   @relation(fields: [userId], references: [id])
  userId   Int    @id
  clinic   Clinic @relation(fields: [clinicId], references: [id])
  clinicId Int
}

model Dentist {
  id           Int           @id
  name         String
  surname      String
  active       Boolean       @default(true)
  patients     Patient[]
  clinic       Clinic?       @relation(fields: [clinicId], references: [id])
  clinicId     Int?
  appointments Appointment[]
  Assistant    Assistant?    @relation(fields: [assistantId], references: [id])
  assistantId  Int?
}

model Assistant {
  id        Int       @id
  name      String
  surname   String
  active    Boolean   @default(true)
  worksWith Dentist[]
  clinic    Clinic    @relation(fields: [clinicId], references: [id])
  clinicId  Int
}

model Patient {
  id           Int             @id @default(autoincrement())
  name         String
  surname      String
  nationalId   String?         @unique
  bday         DateTime?
  email        String?         @unique
  mobile       String?
  phone        String?
  address      PatientAddress?
  active       Boolean         @default(true) // false - means he's archived
  dentist      Dentist?        @relation(fields: [dentistId], references: [id])
  dentistId    Int?
  appointments Appointment[]
  clinic       Clinic?         @relation(fields: [clinicId], references: [id])
  clinicId     Int?
  patientChart ChartRecord[]
  patientTeeth Tooth[]
}

model PatientAddress {
  patient   Patient @relation(fields: [patientId], references: [id])
  patientId Int     @id
  street    String?
  houseNum  String?
  city      String?
  zipCode   String?
  country   String?
}

model ActionCategory {
  id      Int             @id
  name    String
  actions SurfaceAction[]

}

model SurfaceAction {
  id          Int            @unique
  type        ActionType
  category    ActionCategory @relation(fields: [categoryId], references: [id])
  categoryId  Int
  fillColor   String
  surfaceFill SurfaceFill?

}

model SurfaceFill {
  id               String        @unique
  fill             String
  action           SurfaceAction @relation(fields: [actionId], references: [id])
  actionId         Int
  buccalSurface    CrownSurface? @relation("buccalFill")
  mesialSurface    CrownSurface? @relation("mesialFill")
  distalSurface    CrownSurface? @relation("distalFill")
  lingualSurface   CrownSurface? @relation("lingualFill")
  occlusialSurface CrownSurface? @relation("occlusialFill")
}

model CrownSurface {
  id          Int          @unique
  tooth       Tooth        @relation(fields: [toothId], references: [id])
  toothId     String
  buccal      SurfaceFill? @relation("buccalFill", fields: [buccalId], references: [id])
  buccalId    String?
  mesial      SurfaceFill? @relation("mesialFill", fields: [mesialId], references: [id])
  mesialId    String?
  distal      SurfaceFill? @relation("distalFill", fields: [distalId], references: [id])
  distalId    String?
  lingual     SurfaceFill? @relation("lingualFill", fields: [lingualId], references: [id])
  lingualId   String?
  occlusial   SurfaceFill? @relation("occlusialFill", fields: [surfaceFillId], references: [id])
  occlusialId String?


  surfaceFillId String?
  @@id([toothId])
}

model Tooth {
  patient     Patient       @relation(fields: [patientId], references: [id])
  patientId   Int
  id          String        @unique
  quadrant    Int
  toothNumber Int
  crown       CrownSurface?
  createdAt   DateTime

  @@id([id, patientId])
}

model ChartRecord {
  id          Int             @id @default(autoincrement())
  createdAt   DateTime
  type        String
  description String
  tooth       String
  doctor      String
  status      TreatmentStatus
  patient     Patient?        @relation(fields: [patientId], references: [id])
  patientId   Int?
}

// model PatientChart {
//   patient       Patient     @relation(fields: [patientId], references: [id])
//   patientId     Int
//   chartRecord   ChartRecord @relation(fields: [chartRecordId], references: [id])
//   chartRecordId Int

//   @@id([patientId, chartRecordId])
// }

model Appointment {
  id        Int               @id @default(autoincrement())
  treatment String
  startAt   DateTime
  endAt     DateTime
  createdAt DateTime          @default(now())
  status    AppointmentStatus @default(REGISTERED)
  patient   Patient           @relation(fields: [patientId], references: [id])
  patientId Int
  dentist   Dentist           @relation(fields: [dentistId], references: [id])
  dentistId Int
  clinic    Clinic            @relation(fields: [clinicId], references: [id])
  clinicId  Int
}

enum AppointmentStatus {
  REGISTERED
  CONFIRMED
  CANCELED
}

model Treatment {
  id          Int               @id @default(autoincrement())
  name        String
  description String
  category    TreatmentCategory
}

enum ActionType {
  DIAGNOSTIC
  PROCEDURE
}

enum TreatmentCategory {
  PREVENTIVE
  DIAGNOSTIC
  ENDODONTICS
  PERIODONTICS
  PROSTHETICS
  OTHER
}

enum Role {
  ADMIN
  DENTIST
  ASSISTANT
  REGULAR
}

enum TreatmentStatus {
  EXISTING
  COMPLETED
  PLANNED
}

// cant remove it?
enum ToothSurface {
  BUCCAL
  LINGUAL
  DISTAL
  MESIAL
  ROOT
  CROWN
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Clinic {
  id             Int              @id @default(autoincrement())
  name           String
  address        String
  admin          User             @relation(fields: [adminId], references: [id])
  adminId        Int
  dentists       Dentist[]
  assistants     Assistant[]
  patients       Patient[]
  registeredAt   DateTime         @default(now())
  users          UserInClinic[]
  appointments   Appointment[]
  settings       ClinicSettings?
  SurfaceAction  SurfaceAction[]
  ActionCategory ActionCategory[]
}

model ClinicSettings {
  clinic              Clinic  @relation(fields: [clinicId], references: [id])
  clinicId            Int     @id
  workOnSaturday      Boolean @default(false)
  workOnSunday        Boolean @default(false)
  workStartHour       Int     @default(8)
  workStartMinutes    Int     @default(0)
  workEndHour         Int     @default(18)
  workEndMinutes      Int     @default(0)
  appointmentDuration Int     @default(30)
}

model User {
  id            Int           @id @default(autoincrement())
  email         String        @unique
  password      String
  roles         Role[]
  registeredAt  DateTime      @default(now())
  owningClinics Clinic[]
  userInClinic  UserInClinic?
}

model UserInClinic {
  user     User   @relation(fields: [userId], references: [id])
  userId   Int    @id
  clinic   Clinic @relation(fields: [clinicId], references: [id])
  clinicId Int
}

model Dentist {
  id           Int           @id
  name         String
  surname      String
  active       Boolean       @default(true)
  patients     Patient[]
  clinic       Clinic?       @relation(fields: [clinicId], references: [id])
  clinicId     Int?
  appointments Appointment[]
  Assistant    Assistant?    @relation(fields: [assistantId], references: [id])
  assistantId  Int?
}

model Assistant {
  id        Int       @id
  name      String
  surname   String
  active    Boolean   @default(true)
  worksWith Dentist[]
  clinic    Clinic    @relation(fields: [clinicId], references: [id])
  clinicId  Int
}

model Patient {
  id           Int             @id @default(autoincrement())
  name         String
  surname      String
  nationalId   String?         @unique
  bday         DateTime?
  email        String?         @unique
  mobile       String?
  phone        String?
  address      PatientAddress?
  active       Boolean         @default(true) // false - means he's archived
  dentist      Dentist?        @relation(fields: [dentistId], references: [id])
  dentistId    Int?
  appointments Appointment[]
  clinic       Clinic?         @relation(fields: [clinicId], references: [id])
  clinicId     Int?
  patientChart ChartRecord[]
  patientTeeth Tooth[]
}

model PatientAddress {
  patient   Patient @relation(fields: [patientId], references: [id])
  patientId Int     @id
  street    String?
  houseNum  String?
  city      String?
  zipCode   String?
  country   String?
}

model Icon {
  id            Int            @id @default(autoincrement())
  alt           String
  SurfaceAction SurfaceAction?
}

model ActionCategory {
  id       Int             @id @default(autoincrement())
  name     String
  actions  SurfaceAction[]
  clinic   Clinic          @relation(fields: [clinicId], references: [id])
  clinicId Int
}

model SurfaceAction {
  id          Int              @id @default(autoincrement())
  name        String
  type        ActionType // DIAGNOSTIC or PROCEDURE
  categories  ActionCategory[]
  fillColor   String
  icon        Icon?            @relation(fields: [iconId], references: [id])
  iconId      Int?
  rootAction  Boolean
  crownAction Boolean
  surfaceFill SurfaceFill[]
  clinic      Clinic           @relation(fields: [clinicId], references: [id])
  clinicId    Int

}

model SurfaceFill {
  id               Int           @id @default(autoincrement())
  action           SurfaceAction @relation(fields: [actionId], references: [id])
  actionId         Int
  buccalSurface    CrownSurface? @relation("buccalFill")
  mesialSurface    CrownSurface? @relation("mesialFill")
  distalSurface    CrownSurface? @relation("distalFill")
  lingualSurface   CrownSurface? @relation("lingualFill")
  occlusialSurface CrownSurface? @relation("occlusialFill")
  rootOneSurface   RootSurface?  @relation("rootOneFill")
  rootTwoSurface   RootSurface?  @relation("rootTwoFill")
  rootThreeSurface RootSurface?  @relation("rootThreeFill")
}

model CrownSurface {
  id          Int          @id @default(autoincrement())
  tooth       Tooth        @relation(fields: [toothId], references: [id])
  toothId     Int
  buccal      SurfaceFill? @relation("buccalFill", fields: [buccalId], references: [id])
  buccalId    Int?
  mesial      SurfaceFill? @relation("mesialFill", fields: [mesialId], references: [id])
  mesialId    Int?
  distal      SurfaceFill? @relation("distalFill", fields: [distalId], references: [id])
  distalId    Int?
  lingual     SurfaceFill? @relation("lingualFill", fields: [lingualId], references: [id])
  lingualId   Int?
  occlusial   SurfaceFill? @relation("occlusialFill", fields: [occlusialId], references: [id])
  occlusialId Int?
}

model RootSurface {
  id          Int          @id @default(autoincrement())
  tooth       Tooth        @relation(fields: [toothId], references: [id])
  toothId     Int
  rootOne     SurfaceFill? @relation("rootOneFill", fields: [rootOneId], references: [id])
  rootOneId   Int?
  rootTwo     SurfaceFill? @relation("rootTwoFill", fields: [rootTwoId], references: [id])
  rootTwoId   Int?
  rootThree   SurfaceFill? @relation("rootThreeFill", fields: [rootThreeId], references: [id])
  rootThreeId Int?
}

model Tooth {
  id          Int           @id @default(autoincrement())
  patient     Patient       @relation(fields: [patientId], references: [id])
  patientId   Int
  position    String
  primary     Boolean?      @default(false)
  quadrant    Int
  toothNumber Int
  crown       CrownSurface?
  root        RootSurface?
  createdAt   DateTime

  @@unique([patientId, position])
}

model ChartRecord {
  id          Int             @id @default(autoincrement())
  createdAt   DateTime
  type        String
  description String
  tooth       String
  doctor      String
  status      TreatmentStatus
  patient     Patient?        @relation(fields: [patientId], references: [id])
  patientId   Int?
}

// model PatientChart {
//   patient       Patient     @relation(fields: [patientId], references: [id])
//   patientId     Int
//   chartRecord   ChartRecord @relation(fields: [chartRecordId], references: [id])
//   chartRecordId Int

//   @@id([patientId, chartRecordId])
// }

model Appointment {
  id        Int               @id @default(autoincrement())
  treatment String
  startAt   DateTime
  endAt     DateTime
  createdAt DateTime          @default(now())
  status    AppointmentStatus @default(REGISTERED)
  patient   Patient           @relation(fields: [patientId], references: [id])
  patientId Int
  dentist   Dentist           @relation(fields: [dentistId], references: [id])
  dentistId Int
  clinic    Clinic            @relation(fields: [clinicId], references: [id])
  clinicId  Int
}

enum AppointmentStatus {
  REGISTERED
  CONFIRMED
  CANCELED
}

model Treatment {
  id          Int               @id @default(autoincrement())
  name        String
  description String
  category    TreatmentCategory
}

enum ActionType {
  DIAGNOSTIC
  PROCEDURE
}

enum TreatmentCategory {
  PREVENTIVE
  DIAGNOSTIC
  ENDODONTICS
  PERIODONTICS
  PROSTHETICS
  OTHER
}

enum Role {
  ADMIN
  DENTIST
  ASSISTANT
  REGULAR
}

enum TreatmentStatus {
  EXISTING
  COMPLETED
  PLANNED
}

// cant remove it?
enum ToothSurface {
  BUCCAL
  LINGUAL
  DISTAL
  MESIAL
  ROOT
  CROWN
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Clinic {
  id           Int         @id @default(autoincrement())
  name         String
  address      String
  admin        Admin       @relation(fields: [adminId], references: [id])
  adminId      Int
  dentists     Dentist[]
  assistants   Assistant[]
  patients     Patient[]
  registeredAt DateTime    @default(now())
}

model Admin {
  id       Int      @id @default(autoincrement())
  name     String
  surname  String
  email    String   @unique
  password String
  clinic   Clinic[]
}

model Dentist {
  id           Int           @id @default(autoincrement())
  name         String
  surname      String
  email        String        @unique
  password     String
  active       Boolean       @default(true)
  patients     Patient[]
  clinic       Clinic?       @relation(fields: [clinicId], references: [id])
  clinicId     Int?
  appointments Appointment[]
  Assistant    Assistant?    @relation(fields: [assistantId], references: [id])
  assistantId  Int?
}

model Assistant {
  id        Int       @id @default(autoincrement())
  name      String
  surname   String
  email     String    @unique
  password  String
  active    Boolean   @default(true)
  worksWith Dentist[]
  clinic    Clinic    @relation(fields: [clinicId], references: [id])
  clinicId  Int
}

model Patient {
  id           Int           @id @default(autoincrement())
  name         String
  surname      String
  email        String?       @unique
  nationalId   String?       @unique
  active       Boolean       @default(true) // false - means he's archived
  dentist      Dentist?      @relation(fields: [dentistId], references: [id])
  dentistId    Int?
  appointments Appointment[]
  clinic       Clinic?       @relation(fields: [clinicId], references: [id])
  clinicId     Int?
  patientChart ChartRecord[]
  patientTeeth Teeth[]
}

model Teeth {
  patient     Patient      @relation(fields: [patientId], references: [id])
  patientId   Int
  id          String
  surface     ToothSurface
  treatment   Treatment    @relation(fields: [treatmentId], references: [id])
  treatmentId Int
  createdAt   DateTime

  @@id([id, surface, patientId])
}

model ChartRecord {
  id          Int             @id @default(autoincrement())
  createdAt   DateTime
  type        String
  description String
  tooth       String
  surface     ToothSurface
  doctor      String
  status      TreatmentStatus
  patient     Patient?        @relation(fields: [patientId], references: [id])
  patientId   Int?
}

// model PatientChart {
//   patient       Patient     @relation(fields: [patientId], references: [id])
//   patientId     Int
//   chartRecord   ChartRecord @relation(fields: [chartRecordId], references: [id])
//   chartRecordId Int

//   @@id([patientId, chartRecordId])
// }

model Appointment {
  id        Int               @id @default(autoincrement())
  treatment String
  startAt   DateTime
  endAt     DateTime
  createdAt DateTime          @default(now())
  status    AppointmentStatus @default(REGISTERED)
  patient   Patient?          @relation(fields: [patientId], references: [id])
  patientId Int?
  dentist   Dentist           @relation(fields: [dentistId], references: [id])
  dentistId Int
}

enum AppointmentStatus {
  REGISTERED
  CONFIRMED
  CANCELED
}

model Treatment {
  id           Int               @id @default(autoincrement())
  name         String
  description  String
  category     TreatmentCategory
  patientTeeth Teeth[]
}

enum TreatmentCategory {
  PREVENTIVE
  DIAGNOSTIC
  ENDODONTICS
  PERIODONTICS
  PROSTHETICS
  OTHER
}

enum TreatmentStatus {
  EXISTING
  COMPLETED
  PLANNED
}

enum ToothSurface {
  BUCCAL
  LINGUAL
  DISTAL
  MESIAL
  ROOT
  CROWN
}

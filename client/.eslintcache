[{"E:\\_coding\\dental\\client\\src\\index.tsx":"1","E:\\_coding\\dental\\client\\src\\App.tsx":"2","E:\\_coding\\dental\\client\\src\\globalStyles.tsx":"3","E:\\_coding\\dental\\client\\src\\components\\index.ts":"4","E:\\_coding\\dental\\client\\src\\components\\Navbar\\Navbar.tsx":"5","E:\\_coding\\dental\\client\\src\\components\\Navbar\\Navbar.elements.tsx":"6","E:\\_coding\\dental\\client\\src\\components\\Toolbar\\Toolbar.elements.tsx":"7","E:\\_coding\\dental\\client\\src\\components\\Toolbar\\Toolbar.tsx":"8","E:\\_coding\\dental\\client\\src\\pages\\Dashboard.tsx":"9","E:\\_coding\\dental\\client\\src\\pages\\index.tsx":"10","E:\\_coding\\dental\\client\\src\\components\\Navbar\\MobileNavbar.tsx":"11","E:\\_coding\\dental\\client\\src\\components\\Navbar\\MobileNavbar.elements.tsx":"12","E:\\_coding\\dental\\client\\src\\store\\store.ts":"13","E:\\_coding\\dental\\client\\src\\store\\slices\\modalsSlice.ts":"14","E:\\_coding\\dental\\client\\src\\components\\modals\\MainModal.tsx":"15","E:\\_coding\\dental\\client\\src\\components\\modals\\Modals.elements.tsx":"16","E:\\_coding\\dental\\client\\src\\components\\modals\\AddPatientContent.tsx":"17","E:\\_coding\\dental\\client\\src\\components\\elements\\Elements.tsx":"18","E:\\_coding\\dental\\client\\src\\components\\elements\\Input.tsx":"19","E:\\_coding\\dental\\client\\src\\components\\elements\\Select.tsx":"20","E:\\_coding\\dental\\client\\src\\components\\modals\\NewAppointmentContent.tsx":"21","E:\\_coding\\dental\\client\\src\\components\\elements\\SelectWithInput.tsx":"22","E:\\_coding\\dental\\client\\src\\components\\modals\\PatientFormContent.tsx":"23","E:\\_coding\\dental\\client\\src\\graphql\\queries\\patient.ts":"24","E:\\_coding\\dental\\client\\src\\graphql\\queries\\dentist.ts":"25","E:\\_coding\\dental\\client\\src\\graphql\\queries\\treatment.ts":"26","E:\\_coding\\dental\\client\\src\\components\\daypicker\\CustomDayPicker.tsx":"27","E:\\_coding\\dental\\client\\src\\graphql\\queries\\appointments.ts":"28","E:\\_coding\\dental\\client\\src\\components\\daypicker\\CustomDayPicke.Elements.tsx":"29","E:\\_coding\\dental\\client\\src\\components\\daypicker\\SelectedDaysDisplay.tsx":"30","E:\\_coding\\dental\\client\\src\\components\\daypicker\\SelectedDaysDisplay.Elements.tsx":"31","E:\\_coding\\dental\\client\\src\\cache.ts":"32"},{"size":1146,"mtime":1611919000065,"results":"33","hashOfConfig":"34"},{"size":1004,"mtime":1611749805711,"results":"35","hashOfConfig":"34"},{"size":1828,"mtime":1611915885965,"results":"36","hashOfConfig":"34"},{"size":171,"mtime":1611569682769,"results":"37","hashOfConfig":"34"},{"size":2909,"mtime":1611569682758,"results":"38","hashOfConfig":"34"},{"size":3274,"mtime":1611569682749,"results":"39","hashOfConfig":"34"},{"size":14036,"mtime":1611915885945,"results":"40","hashOfConfig":"34"},{"size":2192,"mtime":1611153982986,"results":"41","hashOfConfig":"34"},{"size":144,"mtime":1611569682771,"results":"42","hashOfConfig":"34"},{"size":53,"mtime":1611061325490,"results":"43","hashOfConfig":"34"},{"size":1608,"mtime":1611569682742,"results":"44","hashOfConfig":"34"},{"size":1529,"mtime":1611569682741,"results":"45","hashOfConfig":"34"},{"size":435,"mtime":1611569682772,"results":"46","hashOfConfig":"34"},{"size":2059,"mtime":1611928332170,"results":"47","hashOfConfig":"34"},{"size":1636,"mtime":1611749805730,"results":"48","hashOfConfig":"34"},{"size":1315,"mtime":1611749805731,"results":"49","hashOfConfig":"34"},{"size":3420,"mtime":1611749805728,"results":"50","hashOfConfig":"34"},{"size":3829,"mtime":1611927903417,"results":"51","hashOfConfig":"34"},{"size":854,"mtime":1611749805724,"results":"52","hashOfConfig":"34"},{"size":4762,"mtime":1611928007710,"results":"53","hashOfConfig":"34"},{"size":5384,"mtime":1611929601040,"results":"54","hashOfConfig":"34"},{"size":3994,"mtime":1611749805726,"results":"55","hashOfConfig":"34"},{"size":2060,"mtime":1611920271324,"results":"56","hashOfConfig":"34"},{"size":850,"mtime":1611749805735,"results":"57","hashOfConfig":"34"},{"size":809,"mtime":1611919044991,"results":"58","hashOfConfig":"34"},{"size":622,"mtime":1611749805735,"results":"59","hashOfConfig":"34"},{"size":4708,"mtime":1611915885952,"results":"60","hashOfConfig":"34"},{"size":970,"mtime":1611915885966,"results":"61","hashOfConfig":"34"},{"size":1533,"mtime":1611915885948,"results":"62","hashOfConfig":"34"},{"size":1614,"mtime":1611925751661,"results":"63","hashOfConfig":"34"},{"size":2187,"mtime":1611915885953,"results":"64","hashOfConfig":"34"},{"size":409,"mtime":1611918951143,"results":"65","hashOfConfig":"34"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"69"},"3ftvne",{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"69"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"E:\\_coding\\dental\\client\\src\\index.tsx",["133"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport { ApolloClient, HttpLink, InMemoryCache } from '@apollo/client';\r\nimport { setContext } from '@apollo/client/link/context';\r\nimport { cache } from './cache';\r\n\r\nconst httpLink = new HttpLink({\r\n  uri: `http://localhost:5000/graphql`,\r\n});\r\n\r\nconsole.log(process.env.REACT_APP_PORT);\r\n\r\nconst authLink = setContext((_, { headers }) => {\r\n  // get the authentication token from local storage if it exists\r\n  const token = sessionStorage.getItem('token');\r\n  // return the headers to the context so httpLink can read them\r\n  return {\r\n    headers: {\r\n      ...headers,\r\n      authorization: token\r\n        ? `Bearer ${token}`\r\n        : 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoyNCwicm9sZXMiOlsiQURNSU4iXX0sImlhdCI6MTYxMDgwODgxNH0.sT4PL-3W9AqE7NCPddgPWZe0JgS1zksr-UV-k9OK4zc', //placeholder token\r\n    },\r\n  };\r\n});\r\n\r\nexport const client = new ApolloClient({\r\n  link: authLink.concat(httpLink),\r\n  cache,\r\n});\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n",["134","135"],"E:\\_coding\\dental\\client\\src\\App.tsx",[],"E:\\_coding\\dental\\client\\src\\globalStyles.tsx",[],"E:\\_coding\\dental\\client\\src\\components\\index.ts",[],"E:\\_coding\\dental\\client\\src\\components\\Navbar\\Navbar.tsx",[],"E:\\_coding\\dental\\client\\src\\components\\Navbar\\Navbar.elements.tsx",[],"E:\\_coding\\dental\\client\\src\\components\\Toolbar\\Toolbar.elements.tsx",[],"E:\\_coding\\dental\\client\\src\\components\\Toolbar\\Toolbar.tsx",[],"E:\\_coding\\dental\\client\\src\\pages\\Dashboard.tsx",[],"E:\\_coding\\dental\\client\\src\\pages\\index.tsx",[],"E:\\_coding\\dental\\client\\src\\components\\Navbar\\MobileNavbar.tsx",[],"E:\\_coding\\dental\\client\\src\\components\\Navbar\\MobileNavbar.elements.tsx",[],"E:\\_coding\\dental\\client\\src\\store\\store.ts",[],"E:\\_coding\\dental\\client\\src\\store\\slices\\modalsSlice.ts",[],"E:\\_coding\\dental\\client\\src\\components\\modals\\MainModal.tsx",[],"E:\\_coding\\dental\\client\\src\\components\\modals\\Modals.elements.tsx",[],"E:\\_coding\\dental\\client\\src\\components\\modals\\AddPatientContent.tsx",[],"E:\\_coding\\dental\\client\\src\\components\\elements\\Elements.tsx",[],"E:\\_coding\\dental\\client\\src\\components\\elements\\Input.tsx",[],"E:\\_coding\\dental\\client\\src\\components\\elements\\Select.tsx",[],"E:\\_coding\\dental\\client\\src\\components\\modals\\NewAppointmentContent.tsx",[],"E:\\_coding\\dental\\client\\src\\components\\elements\\SelectWithInput.tsx",[],"E:\\_coding\\dental\\client\\src\\components\\modals\\PatientFormContent.tsx",[],"E:\\_coding\\dental\\client\\src\\graphql\\queries\\patient.ts",[],"E:\\_coding\\dental\\client\\src\\graphql\\queries\\dentist.ts",[],"E:\\_coding\\dental\\client\\src\\graphql\\queries\\treatment.ts",[],"E:\\_coding\\dental\\client\\src\\components\\daypicker\\CustomDayPicker.tsx",["136"],"import React, { useEffect, useRef, useState } from 'react';\r\nimport {\r\n  addWeeks,\r\n  eachDayOfInterval,\r\n  endOfWeek,\r\n  startOfWeek,\r\n  subWeeks,\r\n  format,\r\n} from 'date-fns';\r\nimport DayPicker from 'react-day-picker';\r\nimport 'react-day-picker/lib/style.css';\r\nimport { Label } from '../elements/Elements';\r\nimport {\r\n  DayPickerContainer,\r\n  DayPickerWrapper,\r\n  Indicator,\r\n  IndicatorButton,\r\n  StyledDayPicker,\r\n  WeekDisplay,\r\n  WeekPickerWrapper,\r\n} from './CustomDayPicke.Elements';\r\nimport SelectedDaysDisplay from './SelectedDaysDisplay';\r\nimport { useQuery } from '@apollo/client';\r\nimport {\r\n  GET_WEEKLY_APPOINTMENTS,\r\n  WeeklyAppointmentsData,\r\n  WeeklyAppointmentsVars,\r\n} from '../../graphql/queries/appointments';\r\n\r\nfunction getWeekDays(week: Week) {\r\n  const days = eachDayOfInterval(week);\r\n  return days;\r\n}\r\n\r\nfunction getWeekRange(date: Date) {\r\n  const res = {\r\n    start: startOfWeek(new Date(date), { weekStartsOn: 1 }),\r\n    end: endOfWeek(new Date(date), { weekStartsOn: 1 }),\r\n  };\r\n  return res;\r\n}\r\n\r\ntype Week = {\r\n  start: Date;\r\n  end: Date;\r\n};\r\n\r\ntype Props = {\r\n  dentistId: number | string;\r\n};\r\n\r\nconst defaultClinicId = 7;\r\n\r\nconst CustomDayPicker: React.FC<Props> = ({ dentistId }) => {\r\n  const [selectedDays, setSelectedDays] = useState<Date[]>();\r\n  const [selectedWeek, setSelectedWeek] = useState<Week>();\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  const { loading, data: availableAppointments } = useQuery<\r\n    WeeklyAppointmentsData,\r\n    WeeklyAppointmentsVars\r\n  >(GET_WEEKLY_APPOINTMENTS, {\r\n    variables: {\r\n      appointmentsInput: {\r\n        days: selectedDays!,\r\n        clinicId: defaultClinicId,\r\n        dentistId,\r\n      },\r\n    },\r\n    skip: !dentistId,\r\n    fetchPolicy: 'network-only',\r\n  });\r\n\r\n  const handleWeekChange = (action: 'ADD' | 'SUB') => {\r\n    if (selectedWeek) {\r\n      let newSelectedWeek = selectedWeek;\r\n      if (action === 'ADD') {\r\n        newSelectedWeek = {\r\n          start: addWeeks(new Date(selectedWeek.start), 1),\r\n          end: addWeeks(new Date(selectedWeek.end), 1),\r\n        };\r\n      } else if (action === 'SUB') {\r\n        newSelectedWeek = {\r\n          start: subWeeks(new Date(selectedWeek.start), 1),\r\n          end: subWeeks(new Date(selectedWeek.end), 1),\r\n        };\r\n      }\r\n\r\n      const newSelectedDays = getWeekDays(newSelectedWeek);\r\n      setSelectedWeek(newSelectedWeek);\r\n      setSelectedDays(newSelectedDays);\r\n    }\r\n  };\r\n\r\n  const handleDayChange = (date: Date) => {\r\n    setSelectedDays(getWeekDays(getWeekRange(date)));\r\n    setSelectedWeek(getWeekRange(date));\r\n    setIsOpen(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const today = new Date();\r\n    setSelectedDays(getWeekDays(getWeekRange(today)));\r\n    setSelectedWeek(getWeekRange(today));\r\n  }, []);\r\n\r\n  const pickerRef = useRef<DayPicker>();\r\n\r\n  //click outside\r\n  useEffect(() => {\r\n    function handleClickOutside(event: any) {\r\n      if (\r\n        pickerRef &&\r\n        pickerRef.current &&\r\n        !pickerRef.current.dayPicker.contains(event.target)\r\n      ) {\r\n        setIsOpen(false);\r\n      }\r\n    }\r\n\r\n    // Bind the event listener\r\n    document.addEventListener('mousedown', handleClickOutside);\r\n    return () => {\r\n      // Unbind the event listener on clean up\r\n      document.removeEventListener('mousedown', handleClickOutside);\r\n    };\r\n  }, [pickerRef]);\r\n\r\n  let modifiers;\r\n  if (selectedDays && selectedDays.length > 0) {\r\n    modifiers = {\r\n      selectedRangeStart: selectedDays[0],\r\n      selectedRangeEnd: selectedDays[6],\r\n    };\r\n  }\r\n\r\n  return (\r\n    <DayPickerContainer>\r\n      <Label>Choose date</Label>\r\n      <WeekPickerWrapper>\r\n        <IndicatorButton onClick={() => handleWeekChange('SUB')} left>\r\n          <Indicator />\r\n        </IndicatorButton>\r\n        <WeekDisplay onClick={() => setIsOpen(!isOpen)}>\r\n          {selectedDays &&\r\n            selectedDays.length === 7 &&\r\n            format(new Date(selectedDays[0]), 'dd LLL') +\r\n              ' - ' +\r\n              format(new Date(selectedDays[6]), 'dd LLL')}\r\n        </WeekDisplay>\r\n        <IndicatorButton onClick={() => handleWeekChange('ADD')}>\r\n          <Indicator />\r\n        </IndicatorButton>\r\n      </WeekPickerWrapper>\r\n      {isOpen && (\r\n        <DayPickerWrapper>\r\n          <StyledDayPicker\r\n            ref={pickerRef}\r\n            selectedDays={selectedDays}\r\n            showOutsideDays\r\n            modifiers={modifiers}\r\n            onDayClick={handleDayChange}\r\n            firstDayOfWeek={1}\r\n          />\r\n        </DayPickerWrapper>\r\n      )}\r\n      <SelectedDaysDisplay availableAppointments={availableAppointments} />\r\n    </DayPickerContainer>\r\n  );\r\n};\r\n\r\nexport default CustomDayPicker;\r\n","E:\\_coding\\dental\\client\\src\\graphql\\queries\\appointments.ts",[],"E:\\_coding\\dental\\client\\src\\components\\daypicker\\CustomDayPicke.Elements.tsx",[],"E:\\_coding\\dental\\client\\src\\components\\daypicker\\SelectedDaysDisplay.tsx",[],"E:\\_coding\\dental\\client\\src\\components\\daypicker\\SelectedDaysDisplay.Elements.tsx",[],"E:\\_coding\\dental\\client\\src\\cache.ts",[],{"ruleId":"137","severity":1,"message":"138","line":4,"column":34,"nodeType":"139","messageId":"140","endLine":4,"endColumn":47},{"ruleId":"141","replacedBy":"142"},{"ruleId":"143","replacedBy":"144"},{"ruleId":"137","severity":1,"message":"145","line":59,"column":11,"nodeType":"139","messageId":"140","endLine":59,"endColumn":18},"@typescript-eslint/no-unused-vars","'InMemoryCache' is defined but never used.","Identifier","unusedVar","no-native-reassign",["146"],"no-negated-in-lhs",["147"],"'loading' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]